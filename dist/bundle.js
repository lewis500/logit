(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';
var angular, app, d3;

angular = require('angular');

d3 = require('d3');

app = angular.module('mainApp', [require('angular-material')]).directive('shifter', require('./directives/shifter')).directive('cumChart', require('./components/cumulative/cumChart')).directive('mainDer', require('./components/main/main')).directive('horAxisDer', require('./directives/xAxis')).directive('verAxisDer', require('./directives/yAxis')).directive('shifter', require('./directives/shifter')).directive('behavior', require('./directives/behavior')).directive('datum', require('./directives/datum')).directive('d3Der', require('./directives/d3Der'));



},{"./components/cumulative/cumChart":2,"./components/main/main":3,"./directives/behavior":4,"./directives/d3Der":5,"./directives/datum":6,"./directives/shifter":7,"./directives/xAxis":8,"./directives/yAxis":9,"angular":undefined,"angular-material":undefined,"d3":undefined}],2:[function(require,module,exports){
var Data, PlotCtrl, S, cumCtrl, d3, der, template,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

d3 = require('d3');

S = require('../../services/settings');

PlotCtrl = require('../../models/plotCtrl');

Data = require('../../services/data');

template = "<svg ng-attr-width='{{::vm.width + vm.mar.left+vm.mar.right}}' ng-attr-height='{{::vm.height + vm.mar.top + vm.mar.bottom}}'>\n	<g class='g-main' shifter='{{::[vm.mar.left, vm.mar.top]}}'>\n		<rect d3-der='{width: vm.width, height: vm.height}' class='background' />\n		<g ver-axis-der width='vm.width' fun='vm.verAxFun' ></g>\n		<g hor-axis-der fun='vm.horAxFun' height='vm.height' shifter='{{::[0,vm.height]}}'></g>\n		<g class='g-lines'>\n			<path class='arr-line'  d3-der='{d: vm.arr_line(vm.minutes)}' />\n			<path class='exit-line' d3-der='{d: vm.exit_line(vm.minutes)}' />\n			<line class='wish' d3-der='{y1: vm.Ver(0), y2: 0, x1: vm.Hor(vm.S.wish_time), x2: vm.Hor(vm.S.wish_time)}'></line>\n		</g>\n	</g>\n</svg>";

cumCtrl = (function(superClass) {
  extend(cumCtrl, superClass);

  function cumCtrl(scope) {
    this.scope = scope;
    cumCtrl.__super__.constructor.call(this, this.scope);
    this.minutes = Data.minutes;
    this.Ver.domain([0, .05]);
    this.Ver2 = this.Ver.copy().domain([0, S.vf]);
    this.Hor.domain([0, S.num_minutes]);
    this.S = S;
    this.arr_line = d3.svg.line().y((function(_this) {
      return function(d) {
        return _this.Ver(d.arrivals);
      };
    })(this)).x((function(_this) {
      return function(d) {
        return _this.Hor(d.time);
      };
    })(this));
    this.exit_line = d3.svg.line().y((function(_this) {
      return function(d) {
        return _this.Ver(d.exits);
      };
    })(this)).x((function(_this) {
      return function(d) {
        return _this.Hor(d.time);
      };
    })(this));
    this.v_line = d3.svg.line().y((function(_this) {
      return function(d) {
        return _this.Ver2(d.v);
      };
    })(this)).x((function(_this) {
      return function(d) {
        return _this.Hor(d.time);
      };
    })(this));
  }

  return cumCtrl;

})(PlotCtrl);

der = function() {
  var directive;
  return directive = {
    controller: ['$scope', cumCtrl],
    controllerAs: 'vm',
    templateNamespace: 'svg',
    template: template,
    scope: {}
  };
};

module.exports = der;



},{"../../models/plotCtrl":12,"../../services/data":13,"../../services/settings":14,"d3":undefined}],3:[function(require,module,exports){
'use strict';
var Ctrl, Data, S, _, d3, der, template, timeout;

_ = require('lodash');

d3 = require('d3');

Data = require('../../services/data');

timeout = require('../../helpers').timeout;

S = require('../../services/settings');

template = '<button ng-click=\'vm.play()\'>Play</button>\n<button ng-click=\'vm.stop()\'>Stop</button>\n<div style=\'width: 50%\'>\n	<div layout>\n	  <div flex="25" layout layout-align="center center">\n	    <span class="md-body-1">u (determinism)</span>\n	  </div>\n	  <md-slider md-discrete flex min="0.05" max=".8" ng-model="vm.S.u" step=\'.05\'></md-slider>\n	</div>\n\n	<div layout>\n	  <div flex="25" layout layout-align="center center">\n	    <span class="md-body-1">beta</span>\n	  </div>\n	  <md-slider md-discrete flex min="0.1" max=".9" ng-model="vm.S.beta" step=\'.1\'></md-slider>\n	</div>\n	<div layout>\n	  <div flex="25" layout layout-align="center center">\n	    <span class="md-body-1">gamma</span>\n	  </div>\n	  <md-slider md-discrete flex min="1.2" max="3" ng-model="vm.S.gamma" step=\'.1\'></md-slider>\n	</div>\n</div>';

Ctrl = (function() {
  function Ctrl(scope) {
    this.scope = scope;
    this.minutes = Data.minutes;
    this.paused = false;
    this.Data = Data;
    this.S = S;
  }

  Ctrl.prototype.looper = function() {
    return timeout((function(_this) {
      return function() {
        Data.tick();
        _this.scope.$evalAsync();
        if (!_this.paused) {
          _this.looper();
        }
        return _this.paused;
      };
    })(this), S.interval);
  };

  Ctrl.prototype.play = function() {
    this.paused = false;
    d3.timer.flush();
    return this.looper();
  };

  Ctrl.prototype.stop = function() {
    return this.paused = true;
  };

  return Ctrl;

})();

der = function() {
  var directive;
  return directive = {
    controller: ['$scope', Ctrl],
    controllerAs: 'vm',
    template: template,
    scope: {}
  };
};

module.exports = der;



},{"../../helpers":10,"../../services/data":13,"../../services/settings":14,"d3":undefined,"lodash":undefined}],4:[function(require,module,exports){
var drag;

drag = function($parse) {
  var directive;
  return directive = {
    link: function(scope, el, attr) {
      var sel;
      sel = d3.select(el[0]);
      return sel.call($parse(attr.behavior)(scope));
    }
  };
};

module.exports = drag;



},{}],5:[function(require,module,exports){
var angular, d3, der;

d3 = require('d3');

angular = require('angular');

der = function($parse) {
  var directive;
  return directive = {
    restrict: 'A',
    scope: {
      d3Der: '=',
      tran: '='
    },
    link: function(scope, el, attr) {
      var sel, u;
      sel = d3.select(el[0]);
      u = 't-' + Math.random();
      return scope.$watch('d3Der', function(v) {
        if (scope.tran) {
          return sel.transition(u).attr(v).call(scope.tran);
        } else {
          return sel.attr(v);
        }
      }, true);
    }
  };
};

module.exports = der;



},{"angular":undefined,"d3":undefined}],6:[function(require,module,exports){
module.exports = function($parse) {
  return function(scope, el, attr) {
    return d3.select(el[0]).datum($parse(attr.datum)(scope));
  };
};



},{}],7:[function(require,module,exports){
var d3, der;

d3 = require('d3');

der = function($parse) {
  var directive;
  return directive = {
    restrict: 'A',
    link: function(scope, el, attr) {
      var reshift, sel, tran, u;
      sel = d3.select(el[0]);
      u = 't-' + Math.random();
      tran = $parse(attr.tran)(scope);
      reshift = function(v) {
        if (tran) {
          sel.transition(u).attr('transform', "translate(" + v[0] + "," + v[1] + ")").call(tran);
        } else {
          sel.attr('transform', "translate(" + v[0] + "," + v[1] + ")");
        }
        return d3.select(el[0]);
      };
      return scope.$watch(function() {
        return $parse(attr.shifter)(scope);
      }, reshift, true);
    }
  };
};

module.exports = der;



},{"d3":undefined}],8:[function(require,module,exports){
var angular, d3, der;

d3 = require('d3');

angular = require('angular');

der = function($window) {
  var directive;
  return directive = {
    controller: angular.noop,
    controllerAs: 'vm',
    bindToController: true,
    restrict: 'A',
    templateNamespace: 'svg',
    scope: {
      height: '=',
      fun: '='
    },
    link: function(scope, el, attr, vm) {
      var scale, sel, update;
      scale = vm.fun.scale();
      sel = d3.select(el[0]).classed('x axis', true);
      update = (function(_this) {
        return function() {
          vm.fun.tickSize(-vm.height);
          return sel.call(vm.fun);
        };
      })(this);
      return scope.$watch(function() {
        return [scale.domain(), scale.range(), vm.height];
      }, update, true);
    }
  };
};

module.exports = der;



},{"angular":undefined,"d3":undefined}],9:[function(require,module,exports){
var angular, d3, der;

d3 = require('d3');

angular = require('angular');

der = function($window) {
  var directive;
  return directive = {
    controller: angular.noop,
    controllerAs: 'vm',
    bindToController: true,
    restrict: 'A',
    templateNamespace: 'svg',
    scope: {
      width: '=',
      fun: '='
    },
    link: function(scope, el, attr, vm) {
      var scale, sel, update;
      scale = vm.fun.scale();
      sel = d3.select(el[0]).classed('y axis', true);
      update = (function(_this) {
        return function() {
          vm.fun.tickSize(-vm.width);
          return sel.call(vm.fun);
        };
      })(this);
      return scope.$watch(function() {
        return [scale.domain(), scale.range(), vm.width];
      }, update, true);
    }
  };
};

module.exports = der;



},{"angular":undefined,"d3":undefined}],10:[function(require,module,exports){
'use strict';
module.exports.timeout = function(fun, time) {
  return d3.timer((function(_this) {
    return function() {
      fun();
      return true;
    };
  })(this), time);
};

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};



},{}],11:[function(require,module,exports){
var Minute, S, V, blank;

S = require('../services/settings');

require('../helpers.coffee');

V = function(k) {
  return S.vf * (1 - k / S.kj);
};

blank = {
  pass_k: function() {},
  cum_arrivals: 0,
  cum_exits: 0
};

Minute = (function() {
  function Minute(time) {
    this.time = time;
    this.k = 0;
    this.arrivals = 0;
    this.exits = 0;
    this.cum_arrivals = 0;
    this.cum_exits = 0;
    this.exits = 0;
    this.next = void 0;
    this.prev = void 0;
    this.delta = S.wish_time - this.time;
  }

  Minute.prototype.set_next = function(d) {
    return this.next = d != null ? d : blank;
  };

  Minute.prototype.set_prev = function(d) {
    return this.prev = d != null ? d : blank;
  };

  Minute.prototype.serve = function() {
    this.v = V(this.k);
    this.exits = this.k * this.v / S.L;
    this.next.pass_k(this.k - this.exits);
    this.cum_exits = this.prev.cum_exits + this.exits;
    return this.cum_arrivals = this.prev.cum_arrivals + this.arrivals;
  };

  Minute.prototype.pass_k = function(k) {
    return this.k += k;
  };

  Minute.prototype.calc_cost = function() {
    var dt, p, sp;
    sp = Math.max(this.delta * S.beta, -this.delta * S.gamma);
    if (this.time === (S.num_minutes - 1)) {
      return this.c = S.alpha * S.L / this.v + sp;
    } else {
      dt = 1;
      p = this.v / S.L * dt;
      return this.c = p * sp + (1 - p) * (S.alpha * dt + this.next.c);
    }
  };

  Minute.prototype.choose = function(denominator) {
    var util;
    util = -S.u * this.c;
    return this.arrivals = this.arrivals * (1 - S.R) * S.N + S.R * S.N * Math.exp(util) / denominator;
  };

  Minute.prototype.reset = function() {
    this.k = this.arrivals;
    this.exits = void 0;
    this.v = void 0;
    return this.c = void 0;
  };

  return Minute;

})();

module.exports = Minute;



},{"../helpers.coffee":10,"../services/settings":14}],12:[function(require,module,exports){
var PlotCtrl, _, angular;

angular = require('angular');

_ = require('lodash');

PlotCtrl = (function() {
  function PlotCtrl(scope) {
    this.scope = scope;
    this.width = 450;
    this.height = 300;
    this.Ver = d3.scale.linear().domain([0, 8]).range([this.height, 0]);
    this.Hor = d3.scale.linear().domain([0, 8]).range([0, this.width]);
    this.horAxFun = d3.svg.axis().scale(this.Hor).ticks(5).orient('bottom');
    this.verAxFun = d3.svg.axis().scale(this.Ver).ticks(5).orient('left');
    this.mar = {
      left: 30,
      top: 20,
      right: 10,
      bottom: 30
    };
  }

  return PlotCtrl;

})();

module.exports = PlotCtrl;



},{"angular":undefined,"lodash":undefined}],13:[function(require,module,exports){
var Data, Minute, S, _;

S = require('./settings');

Minute = require('../models/minute');

_ = require('lodash');

Data = (function() {
  function Data() {
    var j, ref, results;
    this.minutes = (function() {
      results = [];
      for (var j = 0, ref = S.num_minutes; 0 <= ref ? j < ref : j > ref; 0 <= ref ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this).map((function(_this) {
      return function(time) {
        var newMinute;
        return newMinute = new Minute(time);
      };
    })(this));
    this.minutes.forEach(function(m, i, k) {
      m.set_prev(k[i - 1]);
      return m.set_next(k[i + 1]);
    });
    this.minutes.forEach(function(m) {
      return m.arrivals = S.N * 1 / S.num_minutes;
    });
  }

  Data.prototype.tick = function() {
    var denominator;
    this.minutes.forEach(function(m) {
      return m.reset();
    });
    this.minutes.forEach(function(m) {
      return m.serve();
    });
    _.forEachRight(this.minutes, function(m) {
      return m.calc_cost();
    });
    denominator = d3.sum(this.minutes, function(m) {
      var res, util;
      util = -m.c * S.u;
      return res = Math.exp(util);
    });
    return this.minutes.forEach(function(m) {
      return m.choose(denominator);
    });
  };

  return Data;

})();

module.exports = new Data();



},{"../models/minute":11,"./settings":14,"lodash":undefined}],14:[function(require,module,exports){
'use strict';
module.exports = {
  wish_time: 70,
  num_minutes: 100,
  L: 1.5,
  u: .2,
  R: .15,
  N: 1,
  kj: .4,
  vf: .4,
  beta: .5,
  alpha: 1,
  gamma: 2,
  interval: 60,
  minutes: []
};



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
